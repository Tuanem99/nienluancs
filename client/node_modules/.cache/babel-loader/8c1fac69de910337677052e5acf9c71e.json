{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport sizeApi from '../API/size.API';\nexport const getAllSize = createAsyncThunk('size/getall', async () => {\n  const data = await sizeApi.getAll();\n  localStorage.setItem('Size', JSON.stringify(data));\n  return data;\n});\nexport const createSize = createAsyncThunk('size/create', async payload => {\n  await sizeApi.create(payload);\n  const Size = await sizeApi.getAll();\n  localStorage.setItem('Size', JSON.stringify(Size));\n  return Size;\n});\nexport const updateSize = createAsyncThunk('size/update', async payload => {\n  await sizeApi.update(payload);\n  const Size = await sizeApi.getAll();\n  localStorage.setItem('Size', JSON.stringify(Size));\n  return Size;\n});\nexport const deleteSize = createAsyncThunk('size/delete', async payload => {\n  await sizeApi.remove(payload);\n  const Size = await sizeApi.getAll();\n  localStorage.setItem('Size', JSON.stringify(Size));\n  return Size;\n});\nconst SizeSlice = createSlice({\n  name: 'size',\n  initialState: {\n    Size: JSON.parse(localStorage.getItem('Size')) || {}\n  },\n  reducers: {},\n  extraReducers: {\n    [getAllSize.fulfilled]: (state, action) => {\n      state.Size = action.payload;\n    },\n    [createSize.fulfilled]: (state, action) => {\n      state.Size = action.payload;\n    },\n    [updateSize.fulfilled]: (state, action) => {\n      state.Size = action.payload;\n    },\n    [deleteSize.fulfilled]: (state, action) => {\n      state.Size = action.payload;\n    }\n  }\n});\nconst {\n  reducer\n} = SizeSlice;\nexport default reducer;","map":{"version":3,"sources":["E:/des/ct271-main/code/client/src/Slice/sizeSlice.js"],"names":["createSlice","createAsyncThunk","sizeApi","getAllSize","data","getAll","localStorage","setItem","JSON","stringify","createSize","payload","create","Size","updateSize","update","deleteSize","remove","SizeSlice","name","initialState","parse","getItem","reducers","extraReducers","fulfilled","state","action","reducer"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,gBAArB,QAA4C,kBAA5C;AAEA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,aAAD,EAAgB,YAAY;AAClE,QAAMG,IAAI,GAAG,MAAMF,OAAO,CAACG,MAAR,EAAnB;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAA7B;AACA,SAAOA,IAAP;AACH,CAJyC,CAAnC;AAKP,OAAO,MAAMM,UAAU,GAAGT,gBAAgB,CAAC,aAAD,EAAgB,MAAOU,OAAP,IAAmB;AACzE,QAAMT,OAAO,CAACU,MAAR,CAAeD,OAAf,CAAN;AACA,QAAME,IAAI,GAAG,MAAMX,OAAO,CAACG,MAAR,EAAnB;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeI,IAAf,CAA7B;AACA,SAAOA,IAAP;AACH,CALyC,CAAnC;AAOP,OAAO,MAAMC,UAAU,GAAGb,gBAAgB,CAAC,aAAD,EAAgB,MAAOU,OAAP,IAAmB;AACzE,QAAMT,OAAO,CAACa,MAAR,CAAeJ,OAAf,CAAN;AACA,QAAME,IAAI,GAAG,MAAMX,OAAO,CAACG,MAAR,EAAnB;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeI,IAAf,CAA7B;AACA,SAAOA,IAAP;AACH,CALyC,CAAnC;AAOP,OAAO,MAAMG,UAAU,GAAGf,gBAAgB,CAAC,aAAD,EAAgB,MAAOU,OAAP,IAAmB;AACzE,QAAMT,OAAO,CAACe,MAAR,CAAeN,OAAf,CAAN;AACA,QAAME,IAAI,GAAG,MAAMX,OAAO,CAACG,MAAR,EAAnB;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeI,IAAf,CAA7B;AACA,SAAOA,IAAP;AACH,CALyC,CAAnC;AAQP,MAAMK,SAAS,GAAGlB,WAAW,CAAC;AAC1BmB,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAE;AACVP,IAAAA,IAAI,EAAEL,IAAI,CAACa,KAAL,CAAWf,YAAY,CAACgB,OAAb,CAAqB,MAArB,CAAX,KAA4C;AADxC,GAFY;AAK1BC,EAAAA,QAAQ,EAAE,EALgB;AAM1BC,EAAAA,aAAa,EAAE;AACX,KAACrB,UAAU,CAACsB,SAAZ,GAAwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACb,IAAN,GAAac,MAAM,CAAChB,OAApB;AACH,KAHU;AAIX,KAACD,UAAU,CAACe,SAAZ,GAAwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACb,IAAN,GAAac,MAAM,CAAChB,OAApB;AACH,KANU;AAOX,KAACG,UAAU,CAACW,SAAZ,GAAwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACb,IAAN,GAAac,MAAM,CAAChB,OAApB;AACH,KATU;AAUX,KAACK,UAAU,CAACS,SAAZ,GAAwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACb,IAAN,GAAac,MAAM,CAAChB,OAApB;AACH;AAZU;AANW,CAAD,CAA7B;AAqBA,MAAM;AAACiB,EAAAA;AAAD,IAAYV,SAAlB;AACA,eAAeU,OAAf","sourcesContent":["import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\n\nimport sizeApi from '../API/size.API';\n\nexport const getAllSize = createAsyncThunk('size/getall', async () => {\n    const data = await sizeApi.getAll();\n    localStorage.setItem('Size', JSON.stringify(data))\n    return data;\n});\nexport const createSize = createAsyncThunk('size/create', async (payload) => {\n    await sizeApi.create(payload);\n    const Size = await sizeApi.getAll();\n    localStorage.setItem('Size', JSON.stringify(Size))\n    return Size;\n});\n\nexport const updateSize = createAsyncThunk('size/update', async (payload) => {\n    await sizeApi.update(payload);\n    const Size = await sizeApi.getAll();\n    localStorage.setItem('Size', JSON.stringify(Size))\n    return Size;\n});\n\nexport const deleteSize = createAsyncThunk('size/delete', async (payload) => {\n    await sizeApi.remove(payload);\n    const Size = await sizeApi.getAll();\n    localStorage.setItem('Size', JSON.stringify(Size))\n    return Size;\n});\n\n\nconst SizeSlice = createSlice({\n    name: 'size',\n    initialState: {\n        Size: JSON.parse(localStorage.getItem('Size')) || {}\n    },\n    reducers: {},\n    extraReducers: {\n        [getAllSize.fulfilled]: (state, action) => {\n            state.Size = action.payload\n        },\n        [createSize.fulfilled]: (state, action) => {\n            state.Size = action.payload\n        },\n        [updateSize.fulfilled]: (state, action) => {\n            state.Size = action.payload\n        },\n        [deleteSize.fulfilled]: (state, action) => {\n            state.Size = action.payload\n        }\n    }\n});\nconst {reducer} = SizeSlice;\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}