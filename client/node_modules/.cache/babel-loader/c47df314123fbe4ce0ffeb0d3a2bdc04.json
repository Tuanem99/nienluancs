{"ast":null,"code":"import axios from 'axios';\nconst axiosClient = axios.create({\n  baseURL: 'http://localhost:4000',\n  headers: {\n    'Content-type': 'application/json',\n    'x-access-token': localStorage.getItem(\"x-access-token\")\n  }\n}); // Add a request interceptor\n\naxiosClient.interceptors.request.use(function async(config) {\n  // Do something before request is sent\n  config.headers = {\n    'x-access-token': localStorage.getItem(\"x-access-token\"),\n    'Content-type': 'application/json'\n  };\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // Add a response interceptor\n\naxiosClient.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  return response.data;\n}, function async(error) {\n  // Any status codes that falls outside the range of 2xx cause this function to trigger\n  // Do something with response error\n  const {\n    config,\n    data,\n    status\n  } = error.response;\n\n  if ((status === 401 || status === 403) && data.message === 'Unauthorized!') {\n    axiosClient.defaults.headers.common['x-access-token'] = localStorage.getItem(\"x-access-token\");\n  } //console.log(error.config)\n\n\n  if (config.url === \"/api/user/signup\" || config.url === \"/api/user/signin\" || config.url === '/api/user/changepwd') {\n    throw new Error(data.message);\n  }\n\n  return Promise.reject(error);\n});\nexport default axiosClient;","map":{"version":3,"sources":["C:/Users/TUAN EM/Desktop/ct271-main/code/client/src/API/axiosClient.js"],"names":["axios","axiosClient","create","baseURL","headers","localStorage","getItem","interceptors","request","use","async","config","error","Promise","reject","response","data","status","message","defaults","common","url","Error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAa;AAE7BC,EAAAA,OAAO,EAAE,uBAFoB;AAG7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB,kBADX;AAEL,sBAAkBC,YAAY,CAACC,OAAb,CAAqB,gBAArB;AAFb;AAHoB,CAAb,CAApB,C,CASC;;AACDL,WAAW,CAACM,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,SAASC,KAAT,CAAgBC,MAAhB,EAAwB;AACzD;AACAA,EAAAA,MAAM,CAACP,OAAP,GAAiB;AACf,sBAAkBC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CADH;AAEf,oBAAgB;AAFD,GAAjB;AAIA,SAAOK,MAAP;AACD,CAPH,EAOK,UAAUC,KAAV,EAAiB;AAClB,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CATH,E,CAWA;;AACAX,WAAW,CAACM,YAAZ,CAAyBQ,QAAzB,CAAkCN,GAAlC,CAAsC,UAAUM,QAAV,EAAoB;AACtD;AACA;AACA,SAAOA,QAAQ,CAACC,IAAhB;AACD,CAJH,EAIK,SAASN,KAAT,CAAgBE,KAAhB,EAAuB;AACxB;AACA;AACA,QAAM;AAACD,IAAAA,MAAD;AAASK,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAAyBL,KAAK,CAACG,QAArC;;AACA,MAAG,CAACE,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAA9B,KAAsCD,IAAI,CAACE,OAAL,KAAiB,eAA1D,EAA0E;AACxEjB,IAAAA,WAAW,CAACkB,QAAZ,CAAqBf,OAArB,CAA6BgB,MAA7B,CAAoC,gBAApC,IAAwDf,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAxD;AACD,GANuB,CAOtB;;;AACF,MAAGK,MAAM,CAACU,GAAP,KAAa,kBAAb,IAAmCV,MAAM,CAACU,GAAP,KAAa,kBAAhD,IAAsEV,MAAM,CAACU,GAAP,KAAa,qBAAtF,EAA4G;AAC1G,UAAM,IAAIC,KAAJ,CAAWN,IAAI,CAACE,OAAhB,CAAN;AACD;;AACD,SAAOL,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAhBH;AAkBA,eAAeX,WAAf","sourcesContent":["import axios from 'axios';\nconst axiosClient = axios.create({\n\n    baseURL: 'http://localhost:4000',\n    headers: {\n        'Content-type': 'application/json',\n        'x-access-token': localStorage.getItem(\"x-access-token\")\n    },\n});\n\n // Add a request interceptor\naxiosClient.interceptors.request.use(function async (config) {\n    // Do something before request is sent\n    config.headers = {\n      'x-access-token': localStorage.getItem(\"x-access-token\"),\n      'Content-type': 'application/json',\n    }\n    return config;\n  }, function (error) {\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxiosClient.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response.data;\n  }, function async (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    const {config, data, status} = error.response;\n    if((status === 401 || status === 403) && data.message === 'Unauthorized!'){\n      axiosClient.defaults.headers.common['x-access-token'] = localStorage.getItem(\"x-access-token\");\n    }\n      //console.log(error.config)\n    if(config.url===\"/api/user/signup\" || config.url===\"/api/user/signin\" || config.url==='/api/user/changepwd'){\n      throw new Error( data.message);\n    }\n    return Promise.reject(error);\n  });\n\nexport default axiosClient;"]},"metadata":{},"sourceType":"module"}