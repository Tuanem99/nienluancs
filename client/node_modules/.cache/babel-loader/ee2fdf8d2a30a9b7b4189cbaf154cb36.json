{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport colorApi from '../API/colorAPI';\nexport const getAllColor = createAsyncThunk('Color/getall', async () => {\n  const data = await colorApi.getAll();\n  localStorage.setItem('Color', JSON.stringify(data));\n  return data;\n});\nexport const createColor = createAsyncThunk('Color/create', async payload => {\n  await colorApi.create(payload);\n  const color = await colorApi.getAll();\n  localStorage.setItem('Color', JSON.stringify(color));\n  return color;\n});\nexport const updateColor = createAsyncThunk('Color/update', async payload => {\n  await colorApi.update(payload);\n  const color = await colorApi.getAll();\n  localStorage.setItem('Color', JSON.stringify(color));\n  return color;\n});\nexport const deleteColor = createAsyncThunk('Color/delete', async payload => {\n  await colorApi.remove(payload);\n  const color = await colorApi.getAll();\n  localStorage.setItem('Color', JSON.stringify(color));\n  return color;\n});\nconst colorSlice = createSlice({\n  name: 'Color',\n  initialState: {\n    Color: JSON.parse(localStorage.getItem('Color')) || {}\n  },\n  reducers: {},\n  extraReducers: {\n    [getAllColor.fulfilled]: (state, action) => {\n      state.Color = action.payload;\n    },\n    [createColor.fulfilled]: (state, action) => {\n      state.Color = action.payload;\n    },\n    [updateColor.fulfilled]: (state, action) => {\n      state.Color = action.payload;\n    },\n    [deleteColor.fulfilled]: (state, action) => {\n      state.Color = action.payload;\n    }\n  }\n});\nconst {\n  reducer\n} = colorSlice;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/TUAN EM/Desktop/ct271-main/code/client/src/Slice/colorSlice.js"],"names":["createSlice","createAsyncThunk","colorApi","getAllColor","data","getAll","localStorage","setItem","JSON","stringify","createColor","payload","create","color","updateColor","update","deleteColor","remove","colorSlice","name","initialState","Color","parse","getItem","reducers","extraReducers","fulfilled","state","action","reducer"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,gBAArB,QAA4C,kBAA5C;AAEA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,OAAO,MAAMC,WAAW,GAAGF,gBAAgB,CAAC,cAAD,EAAiB,YAAY;AACpE,QAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,MAAT,EAAnB;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAA9B;AACA,SAAOA,IAAP;AACH,CAJ0C,CAApC;AAKP,OAAO,MAAMM,WAAW,GAAGT,gBAAgB,CAAC,cAAD,EAAiB,MAAOU,OAAP,IAAmB;AAC3E,QAAMT,QAAQ,CAACU,MAAT,CAAgBD,OAAhB,CAAN;AACA,QAAME,KAAK,GAAG,MAAMX,QAAQ,CAACG,MAAT,EAApB;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeI,KAAf,CAA9B;AACA,SAAOA,KAAP;AACH,CAL0C,CAApC;AAOP,OAAO,MAAMC,WAAW,GAAGb,gBAAgB,CAAC,cAAD,EAAiB,MAAOU,OAAP,IAAmB;AAC3E,QAAMT,QAAQ,CAACa,MAAT,CAAgBJ,OAAhB,CAAN;AACA,QAAME,KAAK,GAAG,MAAMX,QAAQ,CAACG,MAAT,EAApB;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeI,KAAf,CAA9B;AACA,SAAOA,KAAP;AACH,CAL0C,CAApC;AAOP,OAAO,MAAMG,WAAW,GAAGf,gBAAgB,CAAC,cAAD,EAAiB,MAAOU,OAAP,IAAmB;AAC3E,QAAMT,QAAQ,CAACe,MAAT,CAAgBN,OAAhB,CAAN;AACA,QAAME,KAAK,GAAG,MAAMX,QAAQ,CAACG,MAAT,EAApB;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeI,KAAf,CAA9B;AACA,SAAOA,KAAP;AACH,CAL0C,CAApC;AAQP,MAAMK,UAAU,GAAGlB,WAAW,CAAC;AAC3BmB,EAAAA,IAAI,EAAE,OADqB;AAE3BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAEb,IAAI,CAACc,KAAL,CAAWhB,YAAY,CAACiB,OAAb,CAAqB,OAArB,CAAX,KAA6C;AAD1C,GAFa;AAK3BC,EAAAA,QAAQ,EAAE,EALiB;AAM3BC,EAAAA,aAAa,EAAE;AACX,KAACtB,WAAW,CAACuB,SAAb,GAAyB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACjB,OAArB;AACH,KAHU;AAIX,KAACD,WAAW,CAACgB,SAAb,GAAyB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACjB,OAArB;AACH,KANU;AAOX,KAACG,WAAW,CAACY,SAAb,GAAyB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACjB,OAArB;AACH,KATU;AAUX,KAACK,WAAW,CAACU,SAAb,GAAyB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACjB,OAArB;AACH;AAZU;AANY,CAAD,CAA9B;AAqBA,MAAM;AAACkB,EAAAA;AAAD,IAAYX,UAAlB;AACA,eAAeW,OAAf","sourcesContent":["import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\n\nimport colorApi from '../API/colorAPI';\n\nexport const getAllColor = createAsyncThunk('Color/getall', async () => {\n    const data = await colorApi.getAll();\n    localStorage.setItem('Color', JSON.stringify(data))\n    return data;\n});\nexport const createColor = createAsyncThunk('Color/create', async (payload) => {\n    await colorApi.create(payload);\n    const color = await colorApi.getAll();\n    localStorage.setItem('Color', JSON.stringify(color))\n    return color;\n});\n\nexport const updateColor = createAsyncThunk('Color/update', async (payload) => {\n    await colorApi.update(payload);\n    const color = await colorApi.getAll();\n    localStorage.setItem('Color', JSON.stringify(color))\n    return color;\n});\n\nexport const deleteColor = createAsyncThunk('Color/delete', async (payload) => {\n    await colorApi.remove(payload);\n    const color = await colorApi.getAll();\n    localStorage.setItem('Color', JSON.stringify(color))\n    return color;\n});\n\n\nconst colorSlice = createSlice({\n    name: 'Color',\n    initialState: {\n        Color: JSON.parse(localStorage.getItem('Color')) || {}\n    },\n    reducers: {},\n    extraReducers: {\n        [getAllColor.fulfilled]: (state, action) => {\n            state.Color = action.payload\n        },\n        [createColor.fulfilled]: (state, action) => {\n            state.Color = action.payload\n        },\n        [updateColor.fulfilled]: (state, action) => {\n            state.Color = action.payload\n        },\n        [deleteColor.fulfilled]: (state, action) => {\n            state.Color = action.payload\n        }\n    }\n});\nconst {reducer} = colorSlice;\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}